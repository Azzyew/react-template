/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppImport } from './routes/app'
import { Route as AppTanstackQueryImport } from './routes/app.tanstack-query'
import { Route as AppHomeImport } from './routes/app.home'

// Create/Update Routes

const AppRoute = AppImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const AppTanstackQueryRoute = AppTanstackQueryImport.update({
  id: '/tanstack-query',
  path: '/tanstack-query',
  getParentRoute: () => AppRoute,
} as any)

const AppHomeRoute = AppHomeImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => AppRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/app/home': {
      id: '/app/home'
      path: '/home'
      fullPath: '/app/home'
      preLoaderRoute: typeof AppHomeImport
      parentRoute: typeof AppImport
    }
    '/app/tanstack-query': {
      id: '/app/tanstack-query'
      path: '/tanstack-query'
      fullPath: '/app/tanstack-query'
      preLoaderRoute: typeof AppTanstackQueryImport
      parentRoute: typeof AppImport
    }
  }
}

// Create and export the route tree

interface AppRouteChildren {
  AppHomeRoute: typeof AppHomeRoute
  AppTanstackQueryRoute: typeof AppTanstackQueryRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppHomeRoute: AppHomeRoute,
  AppTanstackQueryRoute: AppTanstackQueryRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  '/app': typeof AppRouteWithChildren
  '/app/home': typeof AppHomeRoute
  '/app/tanstack-query': typeof AppTanstackQueryRoute
}

export interface FileRoutesByTo {
  '/app': typeof AppRouteWithChildren
  '/app/home': typeof AppHomeRoute
  '/app/tanstack-query': typeof AppTanstackQueryRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/app': typeof AppRouteWithChildren
  '/app/home': typeof AppHomeRoute
  '/app/tanstack-query': typeof AppTanstackQueryRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/app' | '/app/home' | '/app/tanstack-query'
  fileRoutesByTo: FileRoutesByTo
  to: '/app' | '/app/home' | '/app/tanstack-query'
  id: '__root__' | '/app' | '/app/home' | '/app/tanstack-query'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/app"
      ]
    },
    "/app": {
      "filePath": "app.tsx",
      "children": [
        "/app/home",
        "/app/tanstack-query"
      ]
    },
    "/app/home": {
      "filePath": "app.home.tsx",
      "parent": "/app"
    },
    "/app/tanstack-query": {
      "filePath": "app.tanstack-query.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
